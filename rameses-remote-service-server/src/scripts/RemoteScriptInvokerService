import com.rameses.annotations.*;
import com.rameses.osiris3.remote.*;
import java.rmi.server.*;
import com.rameses.util.*;

/*********************************************************************************
* This handles the remote script caching 
*********************************************************************************/
class RemoteScriptInvokerService {

    @XConnection("remote-script-data-cache")
    def dataCache;

    @XConnection("remote-script-mq")
    def remoteMq;

    @ProxyMethod
    public def invoke( def o ) {

        def base64 = new Base64Cipher();
        String txnid = base64.encode( o );
        def obj = query( txnid );

        if( obj != null ) {
            return [ txnid: txnid ];
        }

        def retval = [:];
        def conf = remoteMq.conf;
        def exchange = conf.exchange;
        def key = "RSU"+ new UID();
        def handlename = o.context+":"+o.serviceName+"."+o.methodName;

        retval.conf = [
            exchange: exchange,
            key: key,
            username: conf.user,
            pwd: conf.pwd,
            wshost: conf.wshost,
            vhost: "/",
            connectionClass: "RabbitMQConnectionHandler",
            handlename: handlename
        ];

        //package the message for sending to the server
        def req = [
            key : key,
            exchange: exchange,
            handlename: handlename,
            txnid:txnid, 
            data: o
        ];
        remoteMq.send( req, o.context );
        return retval;
    }

    @ProxyMethod
    public def query(String key) {
        return dataCache.get(key);
    }

    @ProxyMethod
    public def queryById(param) {
        return dataCache.get(param.id);
    }

}
